// Code generated by mockery v2.46.2. DO NOT EDIT.

package ports

import (
	domain "customer-api/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomerService is an autogenerated mock type for the MockCustomerService type
type MockCustomerService struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: customer
func (_m *MockCustomerService) CreateCustomer(customer domain.Customer) error {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomer provides a mock function with given fields: id
func (_m *MockCustomerService) GetCustomer(id string) (*domain.Customer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomer")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCustomer provides a mock function with given fields: customerID
func (_m *MockCustomerService) ValidateCustomer(customerID string) error {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCustomerService creates a new instance of MockCustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerService {
	mock := &MockCustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
